
'use server';

/**
 * @fileOverview An AI-powered tool that reviews online application forms and advises administrators on completeness.
 *
 * - reviewApplication - A function that handles the application review process.
 * - ReviewApplicationInput - The input type for the reviewApplication function.
 * - ReviewApplicationOutput - The return type for the reviewApplication function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

// NEW: Define a more specific schema for the form data part of the input
const AIReviewFormDataSchema = z.object({
  fullName: z.string().describe("Student's full name."),
  nisn: z.string().optional().describe("Student's NISN (National Student Identification Number)."),
  gender: z.string().describe("Student's gender."),
  birthPlace: z.string().describe("Student's place of birth."),
  birthDate: z.string().describe("Student's date of birth in ISO format."),
  address: z.string().describe("Student's full address."),
  phoneNumber: z.string().optional().describe("Student's phone number."),
  previousSchool: z.string().describe("Student's previous school."),
  graduationYear: z.number().describe("Student's graduation year from previous school."),
  averageScore: z.number().optional().describe("Student's average score from last report card."),
  fatherName: z.string().describe("Father's full name."),
  fatherOccupation: z.string().optional().describe("Father's occupation."),
  motherName: z.string().describe("Mother's full name."),
  motherOccupation: z.string().optional().describe("Mother's occupation."),
  guardianName: z.string().optional().describe("Guardian's full name (if applicable)."),
  guardianOccupation: z.string().optional().describe("Guardian's occupation (if applicable)."),
  parentPhoneNumber: z.string().describe("Parent/guardian's phone number."),
});

const ReviewApplicationInputSchema = z.object({
  formData: AIReviewFormDataSchema.describe('The application form data as a JSON object. This will contain flattened personal details, academic history, and parent/guardian information.'),
});
export type ReviewApplicationInput = z.infer<typeof ReviewApplicationInputSchema>;

const ReviewApplicationOutputSchema = z.object({
  summary: z.string().describe('A concise summary of the application review, highlighting overall status.'),
  feedbackNotes: z.string().describe('Detailed feedback for the administrator, including any specific issues or points of concern regarding completeness.'),
  actionItems: z.array(z.string()).describe('A list of specific actions or checks recommended for the administrator.'),
  needsHumanAttention: z.boolean().describe('Indicates if the application requires specific or urgent human attention due to identified issues.'),
});
export type ReviewApplicationOutput = z.infer<typeof ReviewApplicationOutputSchema>;

export async function reviewApplication(input: ReviewApplicationInput): Promise<ReviewApplicationOutput> {
  return reviewApplicationFlow(input);
}

const reviewApplicationPromptObj = ai.definePrompt({
  name: 'reviewApplicationPrompt',
  input: { schema: ReviewApplicationInputSchema },
  output: { schema: ReviewApplicationOutputSchema },
  prompt: `You are an AI assistant tasked with reviewing student application forms for a madrasah. Your goal is to help human administrators by checking for completeness based on the provided data.

Analyze the provided application form data.

Application Form Data:
{{#each formData}}
  - {{@key}}: {{this}}
{{/each}}

Based on the information:
1.  Provide a concise 'summary' of your findings regarding the application data.
2.  Write 'feedbackNotes' for the administrator, detailing any potentially missing information or other concerns based on typical application requirements (e.g., name, contact details, previous school). Be specific.
3.  List any 'actionItems' for the administrator (e.g., "Verify NISN if provided but seems incorrect", "Follow up on missing address details").
4.  Indicate if the application 'needsHumanAttention' (true/false) based on the severity of any issues found. An application with significant missing data warrants human attention.

Structure your output according to the defined output schema.
Ensure that 'feedbackNotes' are comprehensive and helpful for the administrator to take the next steps.
Do not refer to or expect any uploaded documents. Base your review solely on the form data provided.
`,
});

const reviewApplicationFlow = ai.defineFlow(
  {
    name: 'reviewApplicationFlow',
    inputSchema: ReviewApplicationInputSchema,
    outputSchema: ReviewApplicationOutputSchema,
  },
  async (input) => {
    const {output} = await reviewApplicationPromptObj(input);
    
    if (!output) {
      return {
        summary: "AI review could not be completed as no output was generated by the model.",
        feedbackNotes: "The AI model did not return a valid response. Manual review is required.",
        actionItems: ["Perform full manual review of the application."],
        needsHumanAttention: true,
      };
    }
    return output;
  }
);
