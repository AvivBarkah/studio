
'use server';

/**
 * @fileOverview An AI-powered tool that reviews online application forms and advises administrators on completeness and legibility.
 *
 * - reviewApplication - A function that handles the application review process.
 * - ReviewApplicationInput - The input type for the reviewApplication function.
 * - ReviewApplicationOutput - The return type for the reviewApplication function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ReviewApplicationInputSchema = z.object({
  formData: z.record(z.any()).describe('The application form data as a JSON object. This will contain flattened personal details, academic history, and parent/guardian information.'),
  documentDataUris: z
    .array(z.string())
    .describe(
      "An array of data URIs for uploaded documents, each including a MIME type and Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
});
export type ReviewApplicationInput = z.infer<typeof ReviewApplicationInputSchema>;

const ReviewApplicationOutputSchema = z.object({
  summary: z.string().describe('A concise summary of the application review, highlighting overall status.'),
  isComplete: z.boolean().describe('Whether the application form data is considered complete based on requirements.'),
  isLegible: z.boolean().describe('Whether the content of uploaded documents is generally legible.'),
  feedbackNotes: z.string().describe('Detailed feedback for the administrator, including any specific issues or points of concern regarding completeness or legibility.'),
  actionItems: z.array(z.string()).describe('A list of specific actions or checks recommended for the administrator.'),
  needsHumanAttention: z.boolean().describe('Indicates if the application requires specific or urgent human attention due to identified issues.'),
});
export type ReviewApplicationOutput = z.infer<typeof ReviewApplicationOutputSchema>;

export async function reviewApplication(input: ReviewApplicationInput): Promise<ReviewApplicationOutput> {
  return reviewApplicationFlow(input);
}

const reviewApplicationPromptObj = ai.definePrompt({
  name: 'reviewApplicationPrompt',
  input: { schema: ReviewApplicationInputSchema },
  output: { schema: ReviewApplicationOutputSchema },
  prompt: `You are an AI assistant tasked with reviewing student application forms for a madrasah. Your goal is to help human administrators by checking for completeness and legibility.

Analyze the provided application form data and document URIs.

Application Form Data:
{{#each formData}}
  - {{@key}}: {{this}}
{{/each}}

Uploaded Documents:
{{#if documentDataUris}}
  {{#each documentDataUris}}
    - Document ({{@index}}): {{media url=this}}
  {{/each}}
{{else}}
  - No documents were uploaded.
{{/if}}

Based on the information:
1.  Provide a concise 'summary' of your findings.
2.  Determine if the application form data ('isComplete') appears to be filled out. Check for obviously missing critical information based on typical application requirements (e.g., name, contact details, previous school).
3.  Assess if the uploaded documents ('isLegible') are generally clear and readable from the provided data URIs.
4.  Write 'feedbackNotes' for the administrator, detailing any missing information, legibility issues in documents, or other concerns. Be specific. If no documents were uploaded, note this as a major issue.
5.  List any 'actionItems' for the administrator (e.g., "Verify NISN if provided but seems incorrect", "Request clearer copy of birth certificate").
6.  Indicate if the application 'needsHumanAttention' (true/false) based on the severity of any issues found. An incomplete application or illegible critical documents warrant human attention.

Structure your output according to the defined output schema.
Ensure that 'feedbackNotes' are comprehensive and helpful for the administrator to take the next steps.
If no documents are provided (documentDataUris is empty or null), this is a critical issue for completeness and should be highlighted.
`,
});

const reviewApplicationFlow = ai.defineFlow(
  {
    name: 'reviewApplicationFlow',
    inputSchema: ReviewApplicationInputSchema,
    outputSchema: ReviewApplicationOutputSchema,
  },
  async (input) => {
    const {output} = await reviewApplicationPromptObj(input);
    
    if (!output) {
      return {
        summary: "AI review could not be completed as no output was generated by the model.",
        isComplete: false,
        isLegible: false,
        feedbackNotes: "The AI model did not return a valid response. Manual review is required.",
        actionItems: ["Perform full manual review of the application."],
        needsHumanAttention: true,
      };
    }
    return output;
  }
);
